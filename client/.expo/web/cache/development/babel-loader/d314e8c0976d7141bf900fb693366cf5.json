{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/gautiermarechal/recipes-generator/client/components/SearchBar.js\";\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { TextInput } from \"react-native-gesture-handler\";\nimport { COLORS } from \"../libs/constants\";\nimport SearchIcon from \"../assets/magnifying-glass.js\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport searchIngredient from \"../libs/handlers/searchIngredient\";\nimport fetchIngredientsSearchApi from \"../libs/handlers/fetchIngredientsSearchApi\";\nimport { clearResults } from \"../libs/redux/actions/IngredientsSearchActions\";\n\nvar SearchBar = function SearchBar(_ref) {\n  var ingredients = _ref.ingredients,\n      searchType = _ref.searchType,\n      onChangeProp = _ref.onChangeProp,\n      clear = _ref.clear;\n  var dispatch = useDispatch();\n\n  var _useState = useState(function () {\n    return onChangeProp;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      onChange = _useState2[0],\n      setOnChange = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      placeholder = _useState4[0],\n      setPlaceholder = _useState4[1];\n\n  var inputRef = useRef(null);\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      inputValue = _useState6[0],\n      setInputValue = _useState6[1];\n\n  React.useEffect(function () {\n    if (clear) {\n      inputRef.current.clear();\n      setInputValue(\"\");\n    }\n\n    if (inputValue === \"\") {\n      dispatch(clearResults());\n    }\n  }, [clear, inputValue]);\n  useEffect(function () {\n    if (searchType === \"ingredientsList\") {\n      setPlaceholder(\"Search your ingredients here:\");\n    } else if (searchType === \"ingredientsAPI\") {\n      setPlaceholder(\"Search any ingredients to add here\");\n    } else {\n      setPlaceholder(\"\");\n    }\n  }, []);\n  var styles = StyleSheet.create({\n    container: {\n      flexDirection: \"row\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      backgroundColor: COLORS.white,\n      padding: 20,\n      borderRadius: 7,\n      marginTop: 10\n    },\n    searchIcon: {\n      marginRight: 10\n    },\n    searchBar: {\n      backgroundColor: COLORS.white,\n      borderRadius: 7,\n      height: 20,\n      width: \"80%\"\n    }\n  });\n  return React.createElement(React.Fragment, null, React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, React.createElement(SearchIcon, {\n    width: 20,\n    height: 20,\n    fill: COLORS.grey,\n    style: styles.searchIcon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    style: styles.searchBar,\n    placeholder: placeholder,\n    keyboardType: \"web-search\",\n    ref: inputRef,\n    onChangeText: function onChangeText(text) {\n      setInputValue(text);\n\n      if (ingredients) {\n        onChange(ingredients, dispatch, text);\n      } else {\n        onChange(dispatch, text);\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), React.createElement(Pressable, {\n    onPress: function onPress() {\n      setInputValue(\"\");\n      inputRef.current.clear();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, \"X\"))));\n};\n\nexport default SearchBar;","map":{"version":3,"sources":["/Users/gautiermarechal/recipes-generator/client/components/SearchBar.js"],"names":["React","useEffect","useRef","useState","TextInput","COLORS","SearchIcon","useDispatch","useSelector","searchIngredient","fetchIngredientsSearchApi","clearResults","SearchBar","ingredients","searchType","onChangeProp","clear","dispatch","onChange","setOnChange","placeholder","setPlaceholder","inputRef","inputValue","setInputValue","current","styles","StyleSheet","create","container","flexDirection","justifyContent","alignItems","backgroundColor","white","padding","borderRadius","marginTop","searchIcon","marginRight","searchBar","height","width","grey","text"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { View, StyleSheet, Pressable, Text } from \"react-native\";\nimport { TextInput } from \"react-native-gesture-handler\";\nimport { COLORS } from \"../libs/constants\";\nimport SearchIcon from \"../assets/magnifying-glass.js\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport searchIngredient from \"../libs/handlers/searchIngredient\";\nimport fetchIngredientsSearchApi from \"../libs/handlers/fetchIngredientsSearchApi\";\nimport { clearResults } from \"../libs/redux/actions/IngredientsSearchActions\";\n\nconst SearchBar = ({ ingredients, searchType, onChangeProp, clear }) => {\n  const dispatch = useDispatch();\n  const [onChange, setOnChange] = useState(() => onChangeProp);\n  const [placeholder, setPlaceholder] = useState(\"\");\n  const inputRef = useRef(null);\n  const [inputValue, setInputValue] = useState(\"\");\n\n  React.useEffect(() => {\n    if (clear) {\n      inputRef.current.clear();\n      setInputValue(\"\");\n    }\n\n    if (inputValue === \"\") {\n      dispatch(clearResults());\n    }\n  }, [clear, inputValue]);\n\n  useEffect(() => {\n    if (searchType === \"ingredientsList\") {\n      setPlaceholder(\"Search your ingredients here:\");\n    } else if (searchType === \"ingredientsAPI\") {\n      setPlaceholder(\"Search any ingredients to add here\");\n    } else {\n      setPlaceholder(\"\");\n    }\n  }, []);\n\n  const styles = StyleSheet.create({\n    container: {\n      flexDirection: \"row\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      backgroundColor: COLORS.white,\n      padding: 20,\n      borderRadius: 7,\n      marginTop: 10,\n    },\n    searchIcon: {\n      marginRight: 10,\n    },\n    searchBar: {\n      backgroundColor: COLORS.white,\n      borderRadius: 7,\n      height: 20,\n      width: \"80%\",\n    },\n  });\n  return (\n    <>\n      <View style={styles.container}>\n        <SearchIcon\n          width={20}\n          height={20}\n          fill={COLORS.grey}\n          style={styles.searchIcon}\n        />\n        <TextInput\n          style={styles.searchBar}\n          placeholder={placeholder}\n          keyboardType=\"web-search\"\n          ref={inputRef}\n          onChangeText={\n            (text) => {\n              setInputValue(text);\n              if (ingredients) {\n                onChange(ingredients, dispatch, text);\n              } else {\n                onChange(dispatch, text);\n              }\n            }\n            // ingredients\n            //   ? (text) => onChange(ingredients, dispatch, text)\n            //   : (text) => onChange(dispatch, text)\n          }\n        />\n        <Pressable\n          onPress={() => {\n            setInputValue(\"\");\n            inputRef.current.clear();\n          }}\n        >\n          <Text>X</Text>\n        </Pressable>\n      </View>\n    </>\n  );\n};\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}